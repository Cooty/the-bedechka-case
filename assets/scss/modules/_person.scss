@import "../config/breakpoints";
@import "../config/colors";
@import "../config/sizes";
@import "../config/silent-classes";

.person {
  $avatar-width: 80px;
  $avatar-big-width: 100px;

  %info-row {
    display: block;
    margin-top: .6em;
    font-size: .9rem;
  }

  height: 100%;
  display: flex;
  flex-wrap: nowrap;
  align-items: center;

  &__photo {
    flex: 0;
    flex-basis: $avatar-width;
    max-width: $avatar-width;
    min-width: $avatar-width;
    height: $avatar-width;
    margin-right: 15px;
    background: $image-placeholder-color;
    border-radius: 100%;

    @media screen and (min-width: $desktop) {
      flex-basis: $avatar-big-width;
      max-width: $avatar-big-width;
      min-width: $avatar-big-width;
      height: $avatar-big-width;
    }

    img {
      display: block;
      width: 100%;
      height: 100%;
      border-radius: 100%;
    }

    &:before,
    &:after {
      content: '';
      position: absolute;
      border-radius: 100%;
    }

    &:before {
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      border: 1px solid rgba(0, 0, 0, .2);
    }

    &:after {
      $offset: -2px;

      top: $offset;
      right: $offset;
      bottom: $offset;
      left: $offset;
      box-shadow: 0 0 2px rgba(0, 0, 0, .5);
    }

  }

  &__photo--flipper {
    perspective: 600px;
  }

  &__flip {
    width: 100%;
    height: 100%;
    transition: transform 1s;
    transform-style: preserve-3d;

    img {
      position: absolute;
      height: 100%;
      width: 100%;
      backface-visibility: hidden;

      &:nth-child(2) {
        transform: rotateY(180deg);
      }

    }

  }

  &__header {
    font-size: $subheader-size;
    font-weight: 500;
  }

  &__title {
    @extend %info-row;
    color: $secondary-text-color;
  }

  &__link {
    @extend %info-row;
    word-break: break-all;
  }

  &:hover,
  &:focus {

    .person__flip {
      transform: rotateY(180deg);
    }

  }

  // needed to trigger the hover effect when we hover one the
  // "padding" of the box, since this component is rendered
  // inside a <div class="box"> the hover effect would only
  // kick-in once we move the mouse in the inside area of the box
  // which we want to avoid.
  // We could also add the hover effect on the <div class="box">
  // but that would break encapsulation and the BEM convention
  // since the hover effect "belongs" to this component and not the box
  &:before {
    content: "";
    position: absolute;
    left: calc(var(--gutter) * -1);
    right: calc(var(--gutter) * -1);
    top: -#{$grid-v-gutter};
    bottom: -#{$grid-v-gutter};
  }

}
